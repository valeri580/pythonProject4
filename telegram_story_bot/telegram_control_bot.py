#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import configparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram_story_bot import TelegramStoryBot
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('control_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramControlBot:
    def __init__(self, config_path: str = 'config.ini'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.config = self.load_config(config_path)
        self.bot_token = self.config['DEFAULT']['bot_token']
        self.admin_ids = [int(x.strip()) for x in self.config['DEFAULT']['admins'].split(',')]
        
        # –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        self.story_bot = None
        self.story_bot_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        logger.info("–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_config(self, config_path: str) -> configparser.ConfigParser:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        config = configparser.ConfigParser()
        config.read(config_path, encoding='utf-8')
        return config
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_ids
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("start_bot", self.start_story_bot))
        self.application.add_handler(CommandHandler("stop_bot", self.stop_story_bot))
        self.application.add_handler(CommandHandler("test_story", self.test_story))
        self.application.add_handler(CommandHandler("feed_info", self.feed_info))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_bot")
            ],
            [
                InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_bot"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç —Å—Ç–æ—Ä–∏—Å", callback_data="test_story")
            ],
            [
                InlineKeyboardButton("üìã –ò–Ω—Ñ–æ –æ —Ñ–∏–¥–µ", callback_data="feed_info"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **Telegram Story Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **Telegram Story Bot - –°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ `/start_bot` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ `/stop_bot` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ `/test_story` - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–æ—Ä–∏—Å
‚Ä¢ `/feed_info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–¥–µ
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ—Ä–∏—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ XML —Ñ–∏–¥–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram

**–ù–∞—Å—Ç—Ä–æ–π–∫–∞:**
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª `config.ini` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –í—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ—Ä–∏—Å
‚Ä¢ URL —Ñ–∏–¥–∞
‚Ä¢ –®–∞–±–ª–æ–Ω–æ–≤ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        await self.send_status(update, context)
    
    async def send_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        if self.story_bot is None:
            status_text = "üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        else:
            try:
                status = self.story_bot.get_status()
                status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

üîÑ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'üü¢ –ó–∞–ø—É—â–µ–Ω' if status['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

‚è∞ **–í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:** {', '.join(status['story_times'])}
üìÖ **–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:** {status['story_days']}
üì¶ **–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫—ç—à–µ:** {status['feed_items_count']}
üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {status['last_feed_update'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üåê **URL —Ñ–∏–¥–∞:** `{status['feed_url']}`
üë• **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** {', '.join(map(str, status['admin_ids']))}
üì± **–ê–∫–∫–∞—É–Ω—Ç—ã:** {', '.join(map(str, status['account_ids']))}
                """
            except Exception as e:
                status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def start_story_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_bot"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        if self.story_bot is None:
            try:
                self.story_bot = TelegramStoryBot()
                await update.message.reply_text("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                return
        
        if self.story_bot.is_running:
            await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.story_bot_thread = threading.Thread(target=self.story_bot.start_bot)
            self.story_bot_thread.daemon = True
            self.story_bot_thread.start()
            
            await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
    
    async def stop_story_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop_bot"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        if self.story_bot is None:
            await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        if not self.story_bot.is_running:
            await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            self.story_bot.stop_bot()
            await update.message.reply_text("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")
    
    async def test_story(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_story"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        if self.story_bot is None:
            try:
                self.story_bot = TelegramStoryBot()
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                return
        
        try:
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–æ—Ä–∏—Å...")
            
            story_data = self.story_bot.create_story()
            if story_data:
                test_text = f"""
üß™ **–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–æ—Ä–∏—Å —Å–æ–∑–¥–∞–Ω–∞:**

üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {story_data['title']}
üìÑ **–¢–µ–∫—Å—Ç:** {story_data['text']}
üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** [–°—Å—ã–ª–∫–∞]({story_data['image_url']})

‚úÖ –°—Ç–æ—Ä–∏—Å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é!
                """
                await update.message.reply_text(test_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–æ—Ä–∏—Å")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ—Ä–∏—Å: {str(e)}")
    
    async def feed_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /feed_info"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        if self.story_bot is None:
            try:
                self.story_bot = TelegramStoryBot()
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                return
        
        try:
            await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–¥–µ...")
            
            feed_data = self.story_bot.get_feed_data()
            if feed_data:
                feed_text = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–¥–µ:**

üì¶ **–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(feed_data)}

üìù **–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:**
                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                for i, item in enumerate(feed_data[:3], 1):
                    title = self.story_bot.format_text(self.story_bot.title_template, item)
                    feed_text += f"\n{i}. {title}"
                
                if len(feed_data) > 3:
                    feed_text += f"\n\n... –∏ –µ—â–µ {len(feed_data) - 3} —Ç–æ–≤–∞—Ä–æ–≤"
                
                await update.message.reply_text(feed_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–¥–∞")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–¥–µ: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if not self.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return
        
        if query.data == "status":
            await self.send_status(update, context)
        elif query.data == "start_bot":
            await self.start_story_bot(update, context)
        elif query.data == "stop_bot":
            await self.stop_story_bot(update, context)
        elif query.data == "test_story":
            await self.test_story(update, context)
        elif query.data == "feed_info":
            await self.feed_info(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        control_bot = TelegramControlBot()
        control_bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
